# Disrecte time that elapses during one simulation cycle
period: 0.1

# Configures the robot
# These values are inspired by the Khepera III robot
robot:
  # Maximum translational velocity in m/s
  max_transl_vel: 0.3148
  # Maximum angular velocity in rad/s
  max_ang_vel: 2.2763
  # Polygon specifying the shape of the robot
  bottom_plate: [[-0.024, 0.064],
                 [0.033, 0.064],
                 [0.057, 0.043],
                 [0.074, 0.010],
                 [0.074, -0.010],
                 [0.057, -0.043],
                 [0.033, -0.064],
                 [-0.025, -0.064],
                 [-0.042, -0.043],
                 [-0.048, -0.010],
                 [-0.048, 0.010],
                 [-0.042, 0.043]]
  # Polygon specifying the top view of the robot, used solely for plotting
  top_plate: [[-0.031, 0.043],
              [-0.031, -0.043],
              [0.033, -0.043],
              [0.052, -0.021],
              [0.057, 0.000],
              [0.052, 0.021],
              [0.033, 0.043]]

  # Configures the motor used by the robot
  motor:
    noise:
      # Standard deviation of the left wheel's velocity in meters/second while executing a motion command.
      left_velocity: 0.005 # 0.005
      # Standard deviation of the right wheel's velocity in meters/second while executing a motion command.
      right_velocity: 0.005

  # Configures the sensors used by the robot
  sensor:
    # Minimum detection range of the sensor in meters
    min_range: 0.02
    # Maximum detection range of the sensor in meters
    max_range: 0.2
    # Value that is read at maximum range
    min_read_value: 18
    # Value that is read at minimum range
    max_read_value: 3960
    # Standard deviation of the distance from the sensors to the detected landmark.
    noise: 0.0001 # 0.0001
    # Specificies the poses and number of sensors
    # Each pose is composed of x position, y position and angle in degrees
    poses: [[-0.038, 0.048, 128],
            [0.019, 0.064, 75],
            [0.050, 0.050, 42],
            [0.070, 0.017, 13],
            [0.070, -0.017, -13],
            [0.050, -0.050, -42],
            [0.019, -0.064, -75],
            [-0.038, -0.048, -128],
            [-0.048, 0.000, 180]]
    # Degree of the plotted cone angle of the sensor
    # Careful: the sensor only has a single detection line! The cone is purely for plotting.
    cone_angle: 10
  # Configures the wheels of the robot
  wheel:
    # Wheel radius
    radius: 0.021
    # Distance between the two centers of the wheels
    base_length: 0.0885
    # Value returned by wheel odometry per revolution
    ticks_per_rev: 2765
    # Maximum speed of the wheel in rad/s
    max_speed: 15.0

# Configures the GUI
viewer:
  # Number of pixels per row of a frame
  pixels_width: 500
  # Number of pixels per column of a frame
  pixels_height: 600
  # Pixels per meter
  zoom: 100
  # Distance in meters of the major gridlines
  major_gridline_interval: 1
  # Between the major gridline there are this many minor divisions
  major_gridline_subdivisions: 5

# Configures the random map generation
map:
  # Configures the generated obstacles
  obstacle:
    # Configures octagon obstacles
    octagon:
      # Determines whether octagon obstacles shall be generated
      enabled: true
      # Radius of obstacles 0.04
      radius: 0.7
      # Minimum amount of generated obstacles 25
      min_count: 4
      # Maximum amount of generated obstacles 30
      max_count: 6
      # Minimum distance to origin
      min_distance: 0.2
      # Maximum distance to origin
      max_distance: 3.5
    # Configures rectangle obstacles
    rectangle:
      # Determines whether rectangle obstacles shall be generated
      enabled: true
      # Minimum side length of a rectangle
      min_dim: 0.4
      # Maximum side length of a rectangle
      max_dim: 2.5
      # Maximum sum of the two side lengths of a rectangle
      max_combined_dim: 2.9
      # Minimum amount of generated obstacles
      min_count: 4
      # Maximum amount of generated obstacles
      max_count: 7
      # Minimum distance to origin
      min_distance: 0.4
      # Maximum distance to origin
      max_distance: 3
  # Configures the goal generation
  goal:
    # Determines if a new goal is generated once the robot reaches its current goal
    endless: true
    # Minimum distance to origin
    min_distance: 0
    # Maximum distance to origin
    max_distance: 2
    # Minimum distance to all obstacles
    min_clearance: 0.2

# Configures the control of the robot
control:
  # If robot is closer than this distance to the goal, it is considered as reached
  goal_reached_distance: 0.05
  # If a sensor measures a distance smaller than the danger distance, the robot immediately starts moving into the opposite direction
  danger_distance: 0.04 # 0.06
  # If a sensor measures a distance smaller than the caution distance, the robot will follow the wall of the obstacle
  # Set to danger_distance to disable wall following, since the map contains small, circle-like objects, where wall following can lead to looping around an object
  caution_distance: 0.15 # 0.06
  # Criterion for stopping the following of a wall
  progress_epsilon: 0.05 # 0.05

# Configures the SLAM system
slam:
  # The amount of variables that describe the robot's state
  # These are x position, y position and current angle theta
  # Currently only supports 3
  robot_state_size: 3
  # The amount of variables that describe a landmark's state
  # These are x position and y position
  # Currently only supports 2
  landmark_state_size: 2
  # Determines whether landmark-identifiers is used
  # It determines whether correspondences of landmarks are given, i.e. identifies of landmarks are given
  feature_detector: true

  # Configures the sensor noise. The values are currently empirically chosen.
  sensor_noise:
    # Standard deviation of the detected distance in meters 0.2
    detected_distance: 0.01
    # Standard deviation of the detected angle in degrees
    detected_angle: 30
  ekf_slam:
    # Determines whether the EKF SLAM algorithm shall be executed
    enabled: true
    # The mahalanobis distance threshold used in data association
    distance_threshold: 1
    # Configures the motion noise. The values are currently empirically chosen.
    motion_noise:
      # Standard deviation of the robots x-coordinate in meters after executing a motion command.
      x: 0.005
      # Standard deviation of the robots y-coordinate in meters after executing a motion command.
      y: 0.005
      # Standard deviation of the robots angle in degrees after executing a motion command.
      theta: 1
  fast_slam:
    # Determines whether the FastSLAM algorithm shall be executed
    enabled: true
    # The mahalanobis distance threshold used in data association
    distance_threshold: 0.125
    # The number of used particles
    n_particles: 150 # 80
    # Configures the motion noise. The values are currently empirically chosen.
    motion_noise:
      # Standard deviation of the motion command's translational velocity in m/s.
      translational_velocity: 0.005 #0.005
      # Standard deviation of the motion command's rotational velocity in rad/s.
      rotational_velocity: 0.005  #0.005

  graph_based_slam:
    # Determines whether the Graph-based SLAM algorithm shall be executed
    enabled: true
    # The euclidean distance threshold [m] used in data association.
    # If the distance between the estimated landmarks via slam and via actual measurement
    # larger than the threshold, start backend
    distance_threshold: 0.2
    # The number interval of pose-vertices added that the graph optimization is executed.
    optimization_interval: 50
    # The timestep interval of executing the frontend part.
    frontend_interval: 5
    # Pose density of frontend, meaning the minimum distance [m] between the current pose and the last pose.
    frontend_pose_density: 0.1
    # Configures the motion noise. The values are currently empirically chosen.
    motion_noise:
      # Standard deviation of the robots x-coordinate in meters after executing a motion command.
      x: 0.004 # 0.005
      # Standard deviation of the robots y-coordinate in meters after executing a motion command.
      y: 0.004 # 0.005
      # Standard deviation of the robots angle in degrees after executing a motion command in degrees.
      theta: 1.0 #0.09
    # Configures the sensor noise. The values are currently empirically chosen.
    sensor_noise:
      #x: 0.02 # 0.02 constraint range-bearing
      #y: 0.5236 # 0.02
      x: 0.02 # 0.02 constraint x-y
      y: 0.02 # 0.02  # rad/s

  # Configures the evaluation of the SLAM algorithms
  evaluation:
    # Determines whether the accuracy of the generated maps shall be evaluated
    enabled: true
    # Determines the interval of when the accuracy of the generated maps is calculated
    # A low interval (for example 1) causes performance problems
    interval: 18
    # Determine the method of data association,
    # if true, data wil be associated by landmark identifiers, otherwise by minimum distance
    associate_by_id: true

  # Configures the 2D grid map of the occupancy grid mapping algorithm
  mapping:
    # Determines whether the mapping algorithm shall be executed
    enabled: true
    # Width of the map in meters
    gridmap:
      # Width of the map in meters
      width: 5
      # Height of the map in meters
      height: 6
      # Number of grids per meter. Note that high resolution will lead to performance issues.
      resolution: 20

    path_planning:
        # Determines whether the path planning algorithm shall be executed
        enabled: true
        # Determines how importance the heuristic term is.
        heuristic_weight: 1.0





